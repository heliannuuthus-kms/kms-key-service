//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use chrono::Utc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    ToSchema,
)]
#[sea_orm(table_name = "t_kms")]
#[schema(as = KmsModel)]
pub struct Model {
    #[sea_orm(column_name = "_id", primary_key)]
    #[serde(skip)]
    pub id: i64,
    #[sea_orm(unique)]
    pub kms_id: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[serde(skip)]
    #[sea_orm(default_expr = "Expr::current_timestamp()")]
    pub updated_at: DateTime,
    #[serde(skip)]
    #[sea_orm(default_expr = "Expr::current_timestamp()")]
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
impl Default for Model {
    fn default() -> Self {
        Self {
            id: Default::default(),
            kms_id: Default::default(),
            name: Default::default(),
            description: Default::default(),
            updated_at: Utc::now().naive_local(),
            created_at: Utc::now().naive_local(),
        }
    }
}
