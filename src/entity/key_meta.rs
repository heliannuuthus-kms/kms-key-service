//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use chrono::Utc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

use crate::crypto::types::{KeyOrigin, KeySpec, KeyState, KeyUsage};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    ToSchema,
)]
#[sea_orm(table_name = "t_key_meta")]
#[schema(as = KeyMetaModel)]
pub struct Model {
    #[sea_orm(column_name = "_id", primary_key)]
    #[serde(skip)]
    pub id: i64,
    pub kms_id: String,
    pub key_id: String,
    pub spec: KeySpec,
    pub origin: KeyOrigin,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub version: String,
    pub primary_version: String,
    pub state: KeyState,
    pub usage: KeyUsage,
    pub rotation_interval: i64,
    pub creator: String,
    pub material_expire_at: Option<DateTime>,
    pub last_rotation_at: Option<DateTime>,
    pub deletion_at: Option<DateTime>,
    #[serde(skip)]
    #[sea_orm(default_expr = "Expr::current_timestamp()")]
    pub updated_at: DateTime,
    #[serde(skip_deserializing)]
    #[sea_orm(default_expr = "Expr::current_timestamp()")]
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Default for Model {
    fn default() -> Self {
        Self {
            id: Default::default(),
            kms_id: Default::default(),
            key_id: Default::default(),
            spec: Default::default(),
            origin: Default::default(),
            description: Default::default(),
            version: Default::default(),
            primary_version: Default::default(),
            state: Default::default(),
            usage: Default::default(),
            rotation_interval: Default::default(),
            creator: Default::default(),
            material_expire_at: Default::default(),
            last_rotation_at: Default::default(),
            deletion_at: Default::default(),
            updated_at: Utc::now().naive_local(),
            created_at: Utc::now().naive_local(),
        }
    }
}
