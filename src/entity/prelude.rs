//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use chrono::Utc;
use serde_json::json;

pub use super::{
    key::{
        ActiveModel as KeyActiveModel, Column as KeyColumn,
        Entity as KeyEntity, Model as KeyModel,
    },
    key_alias::{
        Column as KeyAliasColumn, Entity as KeyAliasEntity,
        Model as KeyAliasModel,
    },
    key_meta::{
        Column as KeyMetaColumn, Entity as KeyMetaEntity, Model as KeyMetaModel,
    },
    kms::{Column as KmsColumn, Entity as KmsEntity, Model as KmsModel},
};
use crate::{
    common::{errors::Result, utils},
    crypto::{
        algorithm,
        types::{KeySpec, KeyType},
    },
    entity::key::{AsymmtricKeyPair, SymmtricKeyPair},
};

impl KeyModel {
    pub fn generate_key(&mut self, spec: KeySpec) -> Result<&mut Self> {
        let key_alg_meta = algorithm::select_meta(spec);
        let (left, right) = algorithm::generate_key(spec)?;
        let pri_key = utils::encode64(&left);
        self.key_pair =
            Some(if KeyType::Symmetric.eq(&key_alg_meta.key_type) {
                json!(SymmtricKeyPair { key_pair: pri_key })
            } else {
                json!(AsymmtricKeyPair {
                    private_key: pri_key,
                    public_key: utils::encode64(&right)
                })
            });
        Ok(self)
    }
}

impl KeyMetaModel {
    pub fn renew(&mut self, key: &KeyModel) -> Self {
        // old key version
        self.last_rotation_at = Some(Utc::now().naive_utc());
        self.primary_version = key.version.to_owned();

        // new key version
        let mut key_meta_new = self.clone();
        key_meta_new.version = key.version.to_owned();
        key_meta_new.primary_version = key.version.to_owned();

        key_meta_new
    }
}
